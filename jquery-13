jQuery:Sizzle下正则
1. 正则的创建方式
	构造函数创建 RegExp
	var a = new RegExp("", "gi");
	
	字面量表达
	/xx/   以/开始,以/结束包裹
	
	^起始，$结束
	
 2. 正则
	2.1 i, g|m
		i: 忽略大小写匹配
		g: 全局匹配
		m: 多行匹配
		
	2.2 规则
		[] 方括号  匹配你方括号里的字符，
			- 0-9 范围:0~9
			^ 非
		(|) 查找任何以|分隔的选项
		
		元字符 
		\d  数字
		\D  非数字字符
		\s  查找空白字符
		\S  查找非空白字符
		\b  匹配单词边界
		\B  非单词边界
		\uxxxx 查找unicode字符
		. 	单个字符
		\w 	单词字符
		\W 	非单词字符
		\0  查找NULL字符
		\v  垂直制表符
		\t\r\n\f
		\xxx 8进制
		
		量词
		?  0个或1个
		+  1个以上
		*  >=0
		{n} 匹配次数n
		{n,} 匹配次数至少n
		{n,m} 匹配次数至少n，至多m
		$以什么结尾
		^以什么开始
		
		支持正则表达式的String对象的方法
		search,match,replace , split
		
		
	2.3 使用
		test 
		reg.test(src:"1233231");
		匹配返回true， 不匹配返回false
		
		exec
		reg.exec(src:"afds123");
		匹配返回false，不匹配返回null 
		
		
正则表达式非获取匹配的用法
(?:pattern) 
非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“industr(?:y|ies)”就是一个比“industry|industries”更简略的表达式。
(?=pattern)
非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，“Windows(?=95|98|NT|2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。
(?!pattern)
非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如“Windows(?!95|98|NT|2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。
(?<=pattern)
非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?<=95|98|NT|2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。
(?<!pattern)
非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如“(?<!95|98|NT|2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。这个地方不正确，有问题 
	
